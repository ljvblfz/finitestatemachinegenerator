%{
/* Copyright (C) 1999 Free Software Foundation, Inc.
   Author : philippe@prados-obj.nom.fr <Ph. Prados>

This file is part of fsmg.

Fsmg is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

Fsmg is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Fsmg; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  
*/

#include <ctype.h>
#include <stdlib.h>
#include <errno.h>

#include "all.h"
#include "convexe.h"
#include "error.h"

#define PUTCH(c)		fputc(c,fsm.fout)
#define GETCH()			(*cursor++)
#define UNGETCH(c)		*--cursor=(c)
static char*			cursor;

#define FSM_STATETYPE	char
#define FSM_EVENTTYPE	char
#define FSM_FNTYPE	    static  
#define FSM_MAIN	    automate
#define FSM_BEFORE	    fsm_event=GETCH()

static int		nb_aco=0;	/* Nombre d'acolade imbrique */
static bool		in_line=false;	/* Flag si in line ou in function */


%}

%start		$IN_C
%priority	event

%%

/***********/
/* default */
/***********/

/* Par defaut, reste a l'etat courant */
	:
{ 
	PUTCH($event$);
	if ($event$=='\n') ++fsm.lineno;
}
	;

/*******/
/* EOF */
/*******/

/* Si c'est la fin du fichier, retourne a l'appelant */

	: 0
{ 
	return(-1);
}
	;

/**********/
/* escape */
/**********/

/* Detection de sequence escape ? */
	: '\\'       	       	       				/* Si caractere d'escape... */
{ 
	int      	c;

	PUTCH($event$);
	if ((c=GETCH())==0) return(-1);      			/* Consomme un caractere */
	if (c=='\n') ++fsm.lineno;
	PUTCH(c);
}
	;


/*********/
/* $IN_C */
/*********/

/* Indique que nous somme dans du code C */

$IN_C	: '"'      	       	       				/* Si guillemet... */
{ 
	$state$=$IN_STR;       	       	       			/* entre dans l'etat $IN_STR */
	PUTCH($event$);
}
	| '\''       	       	       				/* Si apostrophe... */
{ 
	$state$=$IN_CHAR;      	       	       			/* entre dans l'etat $IN_CHAR */
	PUTCH($event$);
}
	| '/'      	       	       				/* Si Slash ... */
{ 
	$state$=$IN_QCOMMENT;					/* entre dans l'etat $IN_QCOMMENT */
	PUTCH($event$);
}
	| '#'      	       	       				/* Ds pre-processeur */
{ 
	$state$=$IN_PP;
	PUTCH($event$);
}
	| '{'      	       	       				/* Compte les acolades */
{ 
	++nb_aco;
	PUTCH($event$);
}
	| '}'      	       	       				/* Compte les acolades */
{ 
	PUTCH($event$);
	if (!--nb_aco) return(-1);
}
	| '$'      	       	       				/* Detection mot clef */
{ 
	char	yytext[16];
	size_t	pos=1;
	int		c;

	yytext[0]='$';
	while (isalnum(c=GETCH()) || (c=='_') || (c=='$'))
	{ 
		if (pos<sizeoftab(yytext)-1)
		{ 
			yytext[pos++]=(char)c;			/* Sauve l'evenement */
		}
	}
	UNGETCH((char)c);      	       	       	       		/* Remet le dernier */
	yytext[pos]='\0';      	       	       			/* Buf=le mot a convertir */

	{ 
		ty_var_state* pts;

		if (!strcmp(yytext,"$state$"))
		{ 
			fprintf(fsm.fout,(in_line) ? " *fsm_state " :" fsm_state ");
		}
		else if (!strcmp(yytext,"$event$"))
		{ 
			fprintf(fsm.fout,(in_line) ? " *fsm_event " : " fsm_event ");
		}
		else
		{ 
			if ((pts=find_symbol(fsm.symtbl_state,yytext))==NULL)
			{ 
				fsm_error(fsm.namei,fsm.lineno,ERR_CONV,yytext);
			}
			else
			{ 
				fprintf(fsm.fout,"%d",pts->num-1);
       			pts->use=true;
			}
		}
	}
}
	;

/**********/
/* $IN_PP */
/**********/

/* Indique que nous somme dans une chaine du preprocessor */

$IN_PP	: '\n'       	       					/* Attend CR */
{ 
	$state$=$IN_C;
	PUTCH($event$);
	++fsm.lineno;
}
	;

/***********/
/* $IN_STR */
/***********/

/* Indique que nous somme dans une chaine de caractere */

$IN_STR	: '"'      	       					/* Si guillemet... */
{ 
	$state$=$IN_C;       	       	       			/* retourne a l'etat $IN_C */
	PUTCH($event$);
}
	;

/************/
/* $IN_CHAR */
/************/

/* Indique que nous somme dans un caractere */

$IN_CHAR	: '\''       	       				/* Si apostrophe... */
{ 
	$state$=$IN_C;       	       	       			/* retourne a l'etat $IN_C */
	PUTCH($event$);
}
	;

/****************/
/* $IN_QCOMMENT */
/****************/

/* Cherche a savoir si nous somme dans un commentaire */

$IN_QCOMMENT	: '/'      	       				/* Detection d'un double slash */
{ 
	$state$=$IN_CPPCOMMENT;
	PUTCH($event$);
}
	| '*'      	       					/* Debut de commentaire */
{ 
	$state$=$IN_COMMENT;
	PUTCH($event$);
}
	|      	       	       					/* Sinon... */
{ 
	$state$=$IN_C;       	       	       			/* Retourne en $IN_C */
	PUTCH('/');
	UNGETCH($event$);
}
	;

/******************/
/* $IN_CPPCOMMENT */
/******************/

/* Est dans un commentaire style C++ */

$IN_CPPCOMMENT	: '\n'       					/* Fin du commentaire C++ */
{ 
	$state$=$IN_C;
	PUTCH($event$);
	++fsm.lineno;
}
	;

/***************/
/* $IN_COMMENT */
/***************/

/* Cherche la fin du commentaire C */

$IN_COMMENT	: '*'      	       				/* Fin du commentaire ? */
{ 
	$state$=$IN_FCOMMENT;
	PUTCH($event$);
}
	;

/****************/
/* $IN_FCOMMENT */
/****************/

/* Est-ce la fin d'un commentaire, le debut d'un autre, ou rien ? */

$IN_FCOMMENT	: '/'      	       				/* Fin du commentaire */
{ 
	$state$=$IN_C;
	PUTCH($event$);
}
	| '*'      	       					/* Resynchronise */
{ 
	PUTCH($event$);
}
	|
{ 
	$state$=$IN_COMMENT;       				/* Pas la fin */
	PUTCH($event$);
	if ($event$=='\n') ++fsm.lineno;
}
	;

%%

/*************/
/* print_exe */
/*************/

void print_exe(ty_exe* exe,bool inl)
{ 
	in_line=inl;      	       	       			/* Flag en static */
	fsm.lineno=exe->line;

	cursor=exe->buf;

	automate(0,0);
}
