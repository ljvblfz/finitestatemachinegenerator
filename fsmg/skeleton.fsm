%{
/* Copyright (C) 1999 Free Software Foundation, Inc.
   Author : philippe@prados-obj.nom.fr <Ph. Prados>

This file is part of fsmg.

Fsmg is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

Fsmg is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Fsmg; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  
*/

#include <ctype.h>
#include <stdlib.h>
#include <errno.h>

#include "all.h"
#include "autoyac.h"
#include "conv.h"
#include "skeleton.h"
#include "readske.h"
#include "tools.h"
#include "error.h"

#define PUTCH(c)	fputc(c,fsm.fout)
#define PUTS(s) 	fputs(s,fsm.fout)
#define UNGETCH(c)	ske_ungetc(c,yyin)
#define GETCH() 	ske_getc(yyin)

#define FSM_MAIN	automate
#define FSM_FNTYPE	static  
#define FSM_BEFORE	fsm_event=GETCH();

#ifndef NDEBUG
#define FSM_DEBUG
#endif

static FILE*  yyin;	/* Stream du squelette */

%}

%start		$IN_C
%priority	event
%extern		EOF

%%

/***********/
/* default */
/***********/

/* Par defaut, reste a l'etat courant */
	:
{ 
	PUTCH($event$);
	if ($event$=='\n') fsm.sklineno++;
}
	;

/*******/
/* EOF */
/*******/

/* Si c'est la fin du fichier, retourne a l'appelant */

	: EOF
{ 
	return(-1);
}
	;

/**********/
/* escape */
/**********/

/* Detection de sequence escape ? */
	: '\\'      /* Si caractere d'escape... */
{ 
	char  c;

	PUTCH($event$);
	if ((c=GETCH())==EOF) return(-1); /* Consomme un caractere */
	if (c=='\n') fsm.sklineno++;
	PUTCH(c);
}
	;


/*********/
/* $IN_C */
/*********/

/* Indique que nous somme dans du code C */

$IN_C   : '"'      	       	       	/* Si guillemet... */
{ 
	$state$=$IN_STR;      /* entre dans l'etat $IN_STR */
	PUTCH($event$);
}
	| '\''      /* Si apostrophe... */
{
	$state$=$IN_CHAR;     /* entre dans l'etat $IN_CHAR */
	PUTCH($event$);
}
	| '/'     /* Si Slash ... */
{ 
	$state$=$IN_QCOMMENT;     /* entre dans l'etat $IN_QCOMMENT */
	PUTCH($event$);
}
	| '#'     /* Ds pre-processeur */
{ 
	char    yytext[6];
	size_t  pos=1;
	char  c;

	yytext[0]='#';
	while ((c=GETCH())!='\n')
	{
		if (c==EOF)
		{ 
			yytext[pos]='\0';
			PUTS(yytext);
			return(-1);
		}
		if (c=='\\')				/* Escape */
		{
			if (pos<=sizeoftab(yytext))
			{ 
				yytext[pos++]=c;	/* Sauve l'evenement */
			}
			c=GETCH();
			if (c=='\n') fsm.sklineno++;
		}
		if (pos<sizeoftab(yytext)-1)
		{
			yytext[pos++]=c;		/* Sauve l'evenement */
		}
		if (pos==sizeoftab(yytext)-1)
		{
			if (((!fsm.mode) && (fsm.fl.line)) || strncmp("#line",yytext,5))
			{
				yytext[pos]='\0';
				PUTS(yytext);
				while ((c=GETCH())!='\n')
				{
					if (c==EOF) return(-1);
					if (c=='\\')
					{
						PUTCH(c);
						if ((c=GETCH())=='\n') fsm.sklineno++;
					}
       				PUTCH(c);
				}
				PUTCH('\n');
			}
			else /* Supprime le #line si !fsm.fl.line */
			{
				while ((c=GETCH())!='\n')
				{
					if (c==EOF) return(-1);
					if (c=='\\')
       				{
						if ((c=GETCH())=='\n') fsm.sklineno++;
       				}
				}
				PUTCH('\n');
			}
			break;
		}
	}
	fsm.sklineno++;
}
	| '$'     /* Detection mot clef */
{ 
	char  yytext[16];
	short pos=1;
	char  c;

	yytext[0]='$';
	while (isalnum(c=GETCH()) || (c=='_') || (c=='$'))
	{
		if (pos<sizeoftab(yytext)-1)
		{
			yytext[pos++]=c;        /* Sauve l'evenement */
		}
	}
	UNGETCH(c);				/* Remet le dernier */
	yytext[pos]='\0';			/* Buf=le mot a convertir */

	{
		conv_token(yytext);
		fprintf(fsm.fout,"\n");
		if (fsm.fl.line) aff_line(fsm.fout,fsm.sklineno,fsm.names);
	}
}
	;

/***********/
/* $IN_STR */
/***********/

/* Indique que nous somme dans une chaine de caractere */

$IN_STR   : '"'      	       	/* Si guillemet... */
{ 
	$state$=$IN_C;		/* retourne a l'etat $IN_C */
	PUTCH($event$);
}
       	       	;

/************/
/* $IN_CHAR */
/************/

/* Indique que nous somme dans un caractere */

$IN_CHAR  : '\''		/* Si apostrophe... */
{
	$state$=$IN_C;		/* retourne a l'etat $IN_C */
	PUTCH($event$);
}
	;

/****************/
/* $IN_QCOMMENT */
/****************/

/* Cherche a savoir si nous somme dans un commentaire */

$IN_QCOMMENT  : '/'		/* Detection d'un double slash */
{ 
	$state$=$IN_CPPCOMMENT;
	PUTCH($event$);
}
	| '*'			/* Debut de commentaire */
{ 
	$state$=$IN_COMMENT;
	PUTCH($event$);
}
	|			/* Sinon... */
{ 
	$state$=$IN_C;		/* Retourne en $IN_C */
	UNGETCH($event$);
}
	;

/******************/
/* $IN_CPPCOMMENT */
/******************/

/* Est dans un commentaire style C++ */

$IN_CPPCOMMENT  : '\n'        /* Fin du commentaire C++ */
{ 
	$state$=$IN_C;
	PUTCH($event$);
	fsm.sklineno++;
}
	;

/***************/
/* $IN_COMMENT */
/***************/

/* Cherche la fin du commentaire C */

$IN_COMMENT : '*'		/* Fin du commentaire ? */
{ 
	$state$=$IN_FCOMMENT;
	PUTCH($event$);
}
	| '/'			/* Nouveau commentaire ? */
{ 
	$state$=$IN_NCOMMENT;
	PUTCH($event$);
}
	;

/****************/
/* $IN_NCOMMENT */
/****************/

/* S'agit-il d'un commentaire imbrique ? */

$IN_NCOMMENT  : '*'		/* Debut de commentaire */
{ 
	$state$=$IN_COMMENT;
	PUTCH($event$);
}
	|			/* Pas nouveau commentaire */
{ 
	$state$=$IN_COMMENT;
	PUTCH($event$);
	if ($event$=='\n') fsm.sklineno++;
}
	;

/****************/
/* $IN_FCOMMENT */
/****************/

/* Est-ce la fin d'un commentaire, le debut d'un autre, ou rien ? */

$IN_FCOMMENT  : '/'		/* Fin du commentaire */
{ 
	$state$=$IN_C;
	PUTCH($event$);
}
	| '*'			/* Resynchronise */
{ 
	PUTCH($event$);
}
	|
{ 
	$state$=$IN_COMMENT;	/* Pas la fin */
	PUTCH($event$);
	if ($event$=='\n') fsm.sklineno++;
}
	;

%%

/******************/
/* conv_squelette */
/******************/

/* - Copie le squelette et convertie les cles "$...$" ou "$..." - */

void   conv_squelette()

{ 
	if (!fsm.mode)
	{
		if ((yyin=fopen(fsm.names,"r" FTXT))==NULL)
		{
			fsm_error(fsm.names,0,ERR_FILE,strerror(errno));
			return;
		}
	}
	else
	{
		yyin=NULL;
	}
	fsm.sklineno=1;
	automate(0,0);
	if (yyin!=NULL) fclose(yyin);
}
